import axios from "axios";
import { v4 as uuidv4 } from 'uuid';

export class Client {
  constructor(apiKey, options = {}) {
    this.apiKey = apiKey;
    this.timeout = options.timeout || 120000;
    this.hostname = options.hostname || 'https://api.sapling.ai';
    this.pathname = options.pathname || '/api/v1/';
    this.urlEndpoint = `${this.hostname}${this.pathname}`;
    this.defaultSessionId = uuidv4();
    axios.defaults.timeout = this.timeout;
  }

  axiosPromise(url, method, data) {
    return new Promise((resolve) => {
      axios({
        url,
        method,
        data,
        timeout: this.timeout,
      })
      .then(function (response) {
          resolve(response);
      });
    });
  }

  edits(text, sessionId, options = {}, userDetails = {}) {
    const url = `${this.urlEndpoint}edits`;
    sessionId = sessionId || this.defaultSessionId;

    let data = {
      text,
      key: this.apiKey,
      session_id: sessionId,
    }

    if (options.variety != null) {
      data.variety = options.variety;
    }

    if (options.autoApply != null) {
      data.auto_apply = options.autoApply;
    }

    if (options.lang != null) {
      data.lang = options.lang;
    }

    if (options.medical != null) {
      data.medical = options.medical;
    }

    if (options.advancedEdits != null) {
      data.advanced_edits = options.advancedEdits;
    }

    if (userDetails) {
      const { userId, anonUser } = userDetails;
      data.user_id = userId;
      data.is_anon_user = anonUser || false;
    }

    return this.axiosPromise(url, 'post', data);
  }

  acceptEdit(editUUID, sessionId, userId) {
    const url = `${this.urlEndpoint}edits/${editUUID}/accept`;
    sessionId = sessionId || this.defaultSessionId;
    let data = {
      key: this.apiKey,
      session_id: sessionId,
    }

    if (userId) {
      data.user_id = userId;
    }

    return this.axiosPromise(url, 'post', data);
  }

  rejectEdit(editUUID, sessionId, userId) {
    const url = `${this.urlEndpoint}edits/${editUUID}/reject`;
    sessionId = sessionId || this.defaultSessionId;
    let data = {
      key: this.apiKey,
      session_id: sessionId,
    }

    if (userId) {
      data.user_id = userId;
    }

    return this.axiosPromise(url, 'post', data);
  }

  spellcheck(text, sessionId, options = {}, userDetails = {}) {
    const url = `${this.urlEndpoint}spellcheck`;
    sessionId = sessionId || this.defaultSessionId;

    let data = {
      key: this.apiKey,
      session_id: sessionId,
      text,
    }

    if (options.minLength != null) {
      data.min_length = minLength;
    }

    if (options.multipleEdits != null) {
      data.multiple_edits = multipleEdits;
    }

    if (options.lang != null) {
      data.lang = lang;
    }

    if (options.autoApply != null) {
      data.auto_apply = autoApply;
    }

    if (options.variety != null) {
      data.variety = variety;
    }

    if (options.userData != null) {
      data.user_data = userData;
    }

    if (userDetails) {
      const { userId, anonUser } = userDetails;
      data.user_id = userId;
      data.is_anon_user = anonUser || false;
    }

    return this.axiosPromise(url, 'post', data);
  }


  complete(query, sessionId) {
    const url = `${this.urlEndpoint}complete`;
    sessionId = sessionId || this.defaultSessionId;
    let data = {
      key: this.apiKey,
      session_id: sessionId,
      query,
    }
    return this.axiosPromise(url, 'post', data);
  }


  acceptComplete(completeUUID, query, completion, sessionId) {
    const url = `${this.urlEndpoint}complete/${completeUUID}/accept`;
    sessionId = sessionId || this.defaultSessionId;
    let data = {
      key: this.apiKey,
      session_id: sessionId,
      context: {
        query,
        completion,
      }
    }

    return this.axiosPromise(url, 'post', data);
  }

  tone(text) {
    const url = `${this.urlEndpoint}tone`;

    let data = {
      key: this.apiKey,
      text,
    }
    return this.axiosPromise(url, 'post', data);
  }

  aidetect(text, options = {}) {
    const url = `${this.urlEndpoint}aidetect`;

    let data = {
      text,
      key: this.apiKey,
    }

    if (options.sent_scores != null) {
      data.sent_scores = options.sent_scores;
    }

    return this.axiosPromise(url, 'post', data);
  }
}
