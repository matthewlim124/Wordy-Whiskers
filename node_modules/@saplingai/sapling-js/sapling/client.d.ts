import { AxiosResponse } from "axios";

type AdvancedEditOptions = {
   advanced_edits?: boolean,
   adverbs?: boolean,
   simplifications?: boolean,
   hard_to_read?: boolean,
   qualifiers?: boolean,
   voice?: boolean,
   dei?: boolean,
   gender?: boolean,
   gender_pronoun?: boolean,
   gender_noun?: boolean,
   gender_id?: boolean,
   sensitivity?: boolean,
   disability?: boolean,
   age?: boolean,
   race?: boolean,
   social_class?: boolean,
   violence?: boolean,
}

type ConstructorOptions = {
   timeout?: number,
   hostname?: string,
   pathname?: string,
}

type EditOptions = {
   variety?: string,
   autoApply?: boolean,
   lang?: string,
   medical?: boolean,
   advancedEdits?: AdvancedEditOptions,
}

type AIDetectOptions = {
   sent_scores?: boolean,
}

type SpellcheckOptions = {
   minLength?: number,
   multipleEdits?: boolean,
   lang?: string,
   autoApply?: boolean,
   variety?: string,
   userData?: any,
}

declare class Client {
   constructor(apiKey: string, options?: ConstructorOptions);

   edits(text: string, sessionId: string, options?: EditOptions): Promise<AxiosResponse>;
   acceptEdit(editUUID: string, sessionId: string): Promise<AxiosResponse>;
   rejectEdit(editUUID: string, sessionId: string): Promise<AxiosResponse>;

   spellcheck(text: string, sessionId: string, options?: SpellcheckOptions): Promise<AxiosResponse>;

   complete(query: string, sessionId: string): Promise<AxiosResponse>;
   acceptComplete(completeUUID: string, query: string, completion: string, sessionId: string): Promise<AxiosResponse>;
   tone(text: string): Promise<AxiosResponse>;

   aidetect(text: string, options?: AIDetectOptions): Promise<AxiosResponse>;
}
